const API_BASE_URL = 'https://personalweb-5cn1.onrender.com/api';

const listAndUpdatePosts = async () => {
  try {
    console.log('ƒêang l·∫•y danh s√°ch b√†i vi·∫øt...');
    
    // L·∫•y danh s√°ch b√†i vi·∫øt
    const response = await fetch(`${API_BASE_URL}/blogs`);
    const posts = await response.json();
    
    console.log(`\nüìã T√¨m th·∫•y ${posts.length} b√†i vi·∫øt:`);
    posts.forEach((post, index) => {
      const author = post.user_id?.email || '·∫®n danh';
      console.log(`${index + 1}. ${post.title}`);
      console.log(`   T√°c gi·∫£: ${author}`);
      console.log(`   ID: ${post._id}`);
      console.log(`   Danh m·ª•c: ${post.category_id?.name || 'Kh√¥ng c√≥'}`);
      console.log(`   Tr·∫°ng th√°i: ${post.status ? 'ƒê√£ xu·∫•t b·∫£n' : 'Nh√°p'}`);
      console.log('---');
    });
    
    // T√¨m c√°c b√†i vi·∫øt c√≥ user_id c·ª• th·ªÉ (kh√¥ng ph·∫£i ·∫®n danh)
    const postsWithUser = posts.filter(post => post.user_id && post.user_id !== '·∫®n danh');
    
    if (postsWithUser.length === 0) {
      console.log('\n‚úÖ T·∫•t c·∫£ b√†i vi·∫øt ƒë√£ l√† ·∫®n danh!');
      return;
    }
    
    console.log(`\nüîÑ T√¨m th·∫•y ${postsWithUser.length} b√†i vi·∫øt c·∫ßn s·ª≠a th√†nh ·∫®n danh:`);
    postsWithUser.forEach((post, index) => {
      console.log(`${index + 1}. ${post.title} (ID: ${post._id})`);
    });
    
    // S·ª≠a t·∫•t c·∫£ b√†i vi·∫øt th√†nh ·∫®n danh
    console.log('\nüîÑ ƒêang s·ª≠a c√°c b√†i vi·∫øt th√†nh ·∫®n danh...');
    
    for (const post of postsWithUser) {
      try {
        const updateData = {
          title: post.title,
          post: post.post,
          category_id: post.category_id?._id || post.category_id,
          user_id: null, // ƒê·∫∑t user_id th√†nh null ƒë·ªÉ th√†nh ·∫®n danh
          status: post.status,
          img_path: post.img_path || ''
        };
        
        const updateResponse = await fetch(`${API_BASE_URL}/blogs/${post._id}`, {
          method: 'PATCH',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify(updateData)
        });
        
        if (updateResponse.ok) {
          console.log(`‚úÖ ƒê√£ s·ª≠a b√†i vi·∫øt: ${post.title}`);
        } else {
          const errorData = await updateResponse.json();
          console.log(`‚ùå L·ªói khi s·ª≠a b√†i vi·∫øt "${post.title}":`, errorData.message || 'L·ªói kh√¥ng x√°c ƒë·ªãnh');
        }
      } catch (error) {
        console.log(`‚ùå L·ªói khi s·ª≠a b√†i vi·∫øt "${post.title}":`, error.message);
      }
      
      // ƒê·ª£i m·ªôt ch√∫t gi·ªØa c√°c request
      await new Promise(resolve => setTimeout(resolve, 200));
    }
    
    console.log('\nüéâ Ho√†n th√†nh s·ª≠a b√†i vi·∫øt th√†nh ·∫®n danh!');
    
    // Ki·ªÉm tra l·∫°i danh s√°ch sau khi s·ª≠a
    console.log('\nüìã Danh s√°ch b√†i vi·∫øt sau khi s·ª≠a:');
    const finalResponse = await fetch(`${API_BASE_URL}/blogs`);
    const finalPosts = await finalResponse.json();
    
    finalPosts.forEach((post, index) => {
      const author = post.user_id?.email || '·∫®n danh';
      console.log(`${index + 1}. ${post.title} - T√°c gi·∫£: ${author}`);
    });
    
  } catch (error) {
    console.error('‚ùå L·ªói:', error.message);
  }
};

// Ch·∫°y script
listAndUpdatePosts();
