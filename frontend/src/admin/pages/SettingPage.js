import React, { useState, useEffect } from "react";
import "../AdminLayout.css";
import { useTheme } from "../context/ThemeContext";

const SettingsPage = () => {
    const { darkMode, toggleTheme } = useTheme();
    const [settings, setSettings] = useState({
        siteName: 'Personal Blog',
        siteDescription: 'Trang blog c√° nh√¢n chia s·∫ª ki·∫øn th·ª©c v√† kinh nghi·ªám',
        postsPerPage: 10,
        allowComments: true,
        requireApproval: true,
        allowRegistration: true,
        maintenanceMode: false,
        emailNotifications: true,
        autoBackup: false
    });

    const [saved, setSaved] = useState(false);

    const handleInputChange = (field, value) => {
        setSettings(prev => ({
            ...prev,
            [field]: value
        }));
    };

    const handleSave = () => {
        // TODO: Implement API call to save settings
        localStorage.setItem('adminSettings', JSON.stringify(settings));
        setSaved(true);
        setTimeout(() => setSaved(false), 3000);
    };

    useEffect(() => {
        // Load settings from localStorage or API
        const savedSettings = localStorage.getItem('adminSettings');
        if (savedSettings) {
            setSettings(JSON.parse(savedSettings));
        }
    }, []);

    return (
        <div className="admin-page">
            <h2 className="page-title">‚öôÔ∏è C√†i ƒë·∫∑t h·ªá th·ªëng</h2>

            {/* Website Settings */}
            <div className="settings-card">
                <div className="setting-section">
                    <h3>üåê C√†i ƒë·∫∑t website</h3>
                    
                    <div className="setting-item">
                        <label>T√™n website:</label>
                        <input
                            type="text"
                            className="admin-filter-input"
                            value={settings.siteName}
                            onChange={(e) => handleInputChange('siteName', e.target.value)}
                            placeholder="Nh·∫≠p t√™n website"
                        />
                    </div>

                    <div className="setting-item">
                        <label>M√¥ t·∫£ website:</label>
                        <textarea
                            className="admin-filter-input"
                            rows="3"
                            value={settings.siteDescription}
                            onChange={(e) => handleInputChange('siteDescription', e.target.value)}
                            placeholder="Nh·∫≠p m√¥ t·∫£ website"
                        />
                    </div>

                    <div className="setting-item">
                        <label>S·ªë b√†i vi·∫øt m·ªói trang:</label>
                        <select
                            className="admin-filter-select"
                            value={settings.postsPerPage}
                            onChange={(e) => handleInputChange('postsPerPage', parseInt(e.target.value))}
                        >
                            <option value={5}>5 b√†i</option>
                            <option value={10}>10 b√†i</option>
                            <option value={15}>15 b√†i</option>
                            <option value={20}>20 b√†i</option>
                        </select>
                    </div>
                </div>
            </div>

            {/* Content Settings */}
            <div className="settings-card">
                <div className="setting-section">
                    <h3>üìù C√†i ƒë·∫∑t n·ªôi dung</h3>
                    
                    <div className="setting-item">
                        <label className="checkbox-label">
                            <input
                                type="checkbox"
                                checked={settings.allowComments}
                                onChange={(e) => handleInputChange('allowComments', e.target.checked)}
                            />
                            Cho ph√©p b√¨nh lu·∫≠n
                        </label>
                    </div>

                    <div className="setting-item">
                        <label className="checkbox-label">
                            <input
                                type="checkbox"
                                checked={settings.requireApproval}
                                onChange={(e) => handleInputChange('requireApproval', e.target.checked)}
                            />
                            Y√™u c·∫ßu duy·ªát b√¨nh lu·∫≠n
                        </label>
                    </div>

                    <div className="setting-item">
                        <label className="checkbox-label">
                            <input
                                type="checkbox"
                                checked={settings.allowRegistration}
                                onChange={(e) => handleInputChange('allowRegistration', e.target.checked)}
                            />
                            Cho ph√©p ƒëƒÉng k√Ω th√†nh vi√™n m·ªõi
                        </label>
                    </div>
                </div>
            </div>

            {/* System Settings */}
            <div className="settings-card">
                <div className="setting-section">
                    <h3>üõ†Ô∏è C√†i ƒë·∫∑t h·ªá th·ªëng</h3>
                    
                    <div className="setting-item">
                        <label className="checkbox-label">
                            <input
                                type="checkbox"
                                checked={settings.maintenanceMode}
                                onChange={(e) => handleInputChange('maintenanceMode', e.target.checked)}
                            />
                            <span className="danger-text">Ch·∫ø ƒë·ªô b·∫£o tr√¨ (t·∫Øt website)</span>
                        </label>
                    </div>

                    <div className="setting-item">
                        <label className="checkbox-label">
                            <input
                                type="checkbox"
                                checked={settings.emailNotifications}
                                onChange={(e) => handleInputChange('emailNotifications', e.target.checked)}
                            />
                            G·ª≠i th√¥ng b√°o email
                        </label>
                    </div>

                    <div className="setting-item">
                        <label className="checkbox-label">
                            <input
                                type="checkbox"
                                checked={settings.autoBackup}
                                onChange={(e) => handleInputChange('autoBackup', e.target.checked)}
                            />
                            T·ª± ƒë·ªông sao l∆∞u d·ªØ li·ªáu
                        </label>
                    </div>
                </div>
            </div>

            {/* Theme Settings */}
            <div className="settings-card">
                <div className="setting-section">
                    <h3>üé® Giao di·ªán</h3>
                    <div className="setting-item">
                        <label>Ch·∫ø ƒë·ªô hi·ªÉn th·ªã:</label>
                        <div className="theme-toggle-container">
                            <span className="theme-status">
                                <strong>{darkMode ? "üåô Ch·∫ø ƒë·ªô t·ªëi" : "‚òÄÔ∏è Ch·∫ø ƒë·ªô s√°ng"}</strong>
                            </span>
                            <button
                                className="btn-toggle"
                                onClick={toggleTheme}
                            >
                                ƒê·ªïi sang {darkMode ? "S√°ng" : "T·ªëi"}
                            </button>
                        </div>
                    </div>
                </div>
            </div>

            {/* Save Button */}
            <div className="settings-actions">
                <button 
                    className="btn-save"
                    onClick={handleSave}
                >
                    üíæ L∆∞u c√†i ƒë·∫∑t
                </button>
                {saved && (
                    <span className="save-success">‚úÖ ƒê√£ l∆∞u th√†nh c√¥ng!</span>
                )}
            </div>
        </div>
    );
};

export default SettingsPage;
