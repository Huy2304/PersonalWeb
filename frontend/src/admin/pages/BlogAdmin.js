import React, { useState, useEffect } from "react";
import "../AdminLayout.css";
import { getAllPost } from "../../Services/BlogService.js";

const BlogAdmin = () => {
    const [blogs, setBlogs] = useState([]);
    const [filteredBlogs, setFilteredBlogs] = useState([]);
    const [searchQuery, setSearchQuery] = useState('');
    const [selectedCategory, setSelectedCategory] = useState('');
    const [selectedAuthor, setSelectedAuthor] = useState('');
    const [dateRange, setDateRange] = useState({ start: '', end: '' });
    const [isSearching, setIsSearching] = useState(false);
    const [selectedPosts, setSelectedPosts] = useState([]);
    const [isMultiSelectMode, setIsMultiSelectMode] = useState(false);

    const API_URL = process.env.REACT_APP_API_URL; // CRA

    useEffect(() => {
        const fetchPosts = async () => {
            try {
                const data = await getAllPost();
                const postsData = data.posts || data || [];
                setBlogs(postsData);
                setFilteredBlogs(postsData);
            } catch (err) {
                console.error("L·ªói khi l·∫•y danh s√°ch b√†i vi·∫øt:", err);
            }
        };

        fetchPosts();
    }, []);

    // H√†m t√¨m ki·∫øm v√† filter
    const handleSearch = () => {
        setIsSearching(true);

        let results = blogs.filter(blog => {
            // T√¨m ki·∫øm theo t·ª´ kh√≥a
            const matchesSearch = !searchQuery ||
                blog.title?.toLowerCase().includes(searchQuery.toLowerCase()) ||
                blog.post?.toLowerCase().includes(searchQuery.toLowerCase());

            // Filter theo danh m·ª•c
            const matchesCategory = !selectedCategory ||
                blog.category_id?._id === selectedCategory ||
                blog.category_id === selectedCategory;

            // Filter theo t√°c gi·∫£
            const matchesAuthor = !selectedAuthor ||
                blog.user_id?.name?.toLowerCase().includes(selectedAuthor.toLowerCase()) ||
                blog.user_id?.email?.toLowerCase().includes(selectedAuthor.toLowerCase());

            // Filter theo kho·∫£ng th·ªùi gian
            let matchesDate = true;
            if (dateRange.start || dateRange.end) {
                const publishDate = new Date(blog.date_published);
                if (dateRange.start) {
                    const startDate = new Date(dateRange.start);
                    matchesDate = matchesDate && publishDate >= startDate;
                }
                if (dateRange.end) {
                    const endDate = new Date(dateRange.end);
                    endDate.setHours(23, 59, 59); // ƒê·∫øn cu·ªëi ng√†y
                    matchesDate = matchesDate && publishDate <= endDate;
                }
            }

            return matchesSearch && matchesCategory && matchesAuthor && matchesDate;
        });

        setFilteredBlogs(results);
        setIsSearching(false);
    };

    // X·ª≠ l√Ω thay ƒë·ªïi t·ª´ kh√≥a t√¨m ki·∫øm
    const handleSearchChange = (e) => {
        setSearchQuery(e.target.value);
    };

    // X·ª≠ l√Ω thay ƒë·ªïi danh m·ª•c
    const handleCategoryChange = (e) => {
        setSelectedCategory(e.target.value);
    };

    // X·ª≠ l√Ω thay ƒë·ªïi t√°c gi·∫£
    const handleAuthorChange = (e) => {
        setSelectedAuthor(e.target.value);
    };

    // X·ª≠ l√Ω thay ƒë·ªïi ng√†y b·∫Øt ƒë·∫ßu
    const handleStartDateChange = (e) => {
        setDateRange(prev => ({ ...prev, start: e.target.value }));
    };

    // X·ª≠ l√Ω thay ƒë·ªïi ng√†y k·∫øt th√∫c
    const handleEndDateChange = (e) => {
        setDateRange(prev => ({ ...prev, end: e.target.value }));
    };

    // X·ª≠ l√Ω ch·ªçn/b·ªè ch·ªçn m·ªôt b√†i vi·∫øt
    const handlePostSelection = (postId) => {
        setSelectedPosts(prevSelected => {
            if (prevSelected.includes(postId)) {
                return prevSelected.filter(id => id !== postId);
            } else {
                return [...prevSelected, postId];
            }
        });
    };

    // B·∫≠t/t·∫Øt ch·∫ø ƒë·ªô ch·ªçn nhi·ªÅu
    const toggleMultiSelectMode = () => {
        setIsMultiSelectMode(!isMultiSelectMode);
        if (isMultiSelectMode) {
            setSelectedPosts([]); // Reset selected posts when turning off multi-select
        }
    };

    // X√≥a nhi·ªÅu b√†i vi·∫øt
    const handleDeleteMultiplePosts = async () => {
        if (selectedPosts.length === 0) {
            alert('Vui l√≤ng ch·ªçn √≠t nh·∫•t m·ªôt b√†i vi·∫øt ƒë·ªÉ x√≥a');
            return;
        }

        if (!window.confirm(`B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën x√≥a ${selectedPosts.length} b√†i vi·∫øt ƒë√£ ch·ªçn?`)) {
            return;
        }

        try {
            await Promise.all(selectedPosts.map(postId =>
                fetch(`${API_URL}/api/blogs/${postId}`, {
                    method: 'DELETE',
                    headers: {
                        'Authorization': `Bearer ${localStorage.getItem('token')}`
                    }
                })
            ));

            // C·∫≠p nh·∫≠t state sau khi x√≥a
            setBlogs(prevBlogs => prevBlogs.filter(blog => !selectedPosts.includes(blog._id)));
            setFilteredBlogs(prevBlogs => prevBlogs.filter(blog => !selectedPosts.includes(blog._id)));
            setSelectedPosts([]);
            setIsMultiSelectMode(false);
            alert(`ƒê√£ x√≥a th√†nh c√¥ng ${selectedPosts.length} b√†i vi·∫øt!`);
        } catch (error) {
            console.error('L·ªói khi x√≥a b√†i vi·∫øt:', error);
            alert('C√≥ l·ªói x·∫£y ra khi x√≥a b√†i vi·∫øt');
        }
    };

    // X√≥a t·∫•t c·∫£ filter
    const clearFilters = () => {
        setSearchQuery('');
        setSelectedCategory('');
        setSelectedAuthor('');
        setDateRange({ start: '', end: '' });
        setFilteredBlogs(blogs);
    };

    // T·ª± ƒë·ªông t√¨m ki·∫øm khi c√≥ thay ƒë·ªïi
    useEffect(() => {
        handleSearch();
    }, [searchQuery, selectedCategory, selectedAuthor, dateRange, blogs]);

    // L·∫•y danh s√°ch danh m·ª•c duy nh·∫•t
    const getUniqueCategories = () => {
        const categories = blogs.map(blog => blog.category_id).filter(Boolean);
        return [...new Map(categories.map(item => [item._id || item, item])).values()];
    };

    // L·∫•y danh s√°ch t√°c gi·∫£ duy nh·∫•t
    const getUniqueAuthors = () => {
        const authors = blogs.map(blog => blog.user_id).filter(Boolean);
        return [...new Map(authors.map(item => [item._id || item.email, item])).values()];
    };

    // H√†m format ng√†y ISO -> dd/MM/yyyy
    const formatDate = (isoString) => {
        if (!isoString) return "";
        const date = new Date(isoString);
        return date.toLocaleDateString("vi-VN", {
            day: "2-digit",
            month: "2-digit",
            year: "numeric",
        });
    };

    return (
        <div className="admin-page">
            <h2 className="page-title">Danh s√°ch b√†i vi·∫øt</h2>

            {/* Search and Filter Section */}
            <div className="admin-search-section">
                <div className="search-filters">
                    {/* Search Input */}
                    <div className="search-input-group">
                        <input
                            type="text"
                            value={searchQuery}
                            onChange={handleSearchChange}
                            placeholder="üîç T√¨m theo ti√™u ƒë·ªÅ ho·∫∑c n·ªôi dung..."
                            className="admin-search-input"
                        />
                    </div>

                    {/* Category Filter */}
                    <div className="filter-group">
                        <select
                            value={selectedCategory}
                            onChange={handleCategoryChange}
                            className="admin-filter-select"
                        >
                            <option value="">T·∫•t c·∫£ danh m·ª•c</option>
                            {getUniqueCategories().map(category => (
                                <option key={category._id || category} value={category._id || category}>
                                    {category.name}
                                </option>
                            ))}
                        </select>
                    </div>

                    {/* Author Filter */}
                    <div className="filter-group">
                        <input
                            type="text"
                            value={selectedAuthor}
                            onChange={handleAuthorChange}
                            placeholder="üë§ T√°c gi·∫£..."
                            className="admin-filter-input"
                        />
                    </div>

                    {/* Date Range Filters */}
                    <div className="filter-group">
                        <input
                            type="date"
                            value={dateRange.start}
                            onChange={handleStartDateChange}
                            className="admin-date-input"
                            placeholder="T·ª´ ng√†y"
                        />
                    </div>

                    <div className="filter-group">
                        <input
                            type="date"
                            value={dateRange.end}
                            onChange={handleEndDateChange}
                            className="admin-date-input"
                            placeholder="ƒê·∫øn ng√†y"
                        />
                    </div>

                    {/* Multi-select Mode Button */}
                    <button
                        onClick={toggleMultiSelectMode}
                        className={`multi-select-btn ${isMultiSelectMode ? 'active' : ''}`}
                        style={{
                            backgroundColor: isMultiSelectMode ? '#007bff' : '#6c757d',
                            color: 'white',
                            border: 'none',
                            padding: '8px 16px',
                            borderRadius: '4px',
                            marginRight: '10px',
                            cursor: 'pointer'
                        }}
                    >
                        {isMultiSelectMode ? '‚úì ƒêang ch·ªçn nhi·ªÅu' : '‚òëÔ∏è Ch·ªçn nhi·ªÅu b√†i vi·∫øt'}
                    </button>

                    {/* Delete Multiple Posts Button */}
                    {isMultiSelectMode && selectedPosts.length > 0 && (
                        <button
                            onClick={handleDeleteMultiplePosts}
                            style={{
                                backgroundColor: '#dc3545',
                                color: 'white',
                                border: 'none',
                                padding: '8px 16px',
                                borderRadius: '4px',
                                cursor: 'pointer'
                            }}
                        >
                            üóëÔ∏è X√≥a {selectedPosts.length} b√†i vi·∫øt
                        </button>
                    )}

                    {/* Clear Filters Button */}
                    <button
                        onClick={clearFilters}
                        className="clear-filters-btn"
                        disabled={!searchQuery && !selectedCategory && !selectedAuthor && !dateRange.start && !dateRange.end}
                    >
                        üóëÔ∏è X√≥a b·ªô l·ªçc
                    </button>
                </div>

                {/* Search Results Info */}
                {isSearching && (
                    <div className="search-loading">
                        <span className="loading-spinner">‚è≥</span> ƒêang t√¨m ki·∫øm...
                    </div>
                )}

                {(searchQuery || selectedCategory || selectedAuthor || dateRange.start || dateRange.end) && (
                    <div className="search-results-info">
                        <span className="results-count">
                            Hi·ªÉn th·ªã {filteredBlogs.length} / {blogs.length} b√†i vi·∫øt
                        </span>
                        {filteredBlogs.length === 0 && (
                            <span className="no-results">
                                Kh√¥ng t√¨m th·∫•y k·∫øt qu·∫£ n√†o
                            </span>
                        )}
                    </div>
                )}
            </div>

            <table className="user-table">
                <thead>
                <tr>
                    {isMultiSelectMode && <th>Ch·ªçn</th>}
                    <th>STT</th>
                    <th>Ti√™u ƒë·ªÅ</th>
                    <th>T√°c gi·∫£</th>
                    <th>Danh m·ª•c</th>
                    <th>Ng√†y ƒëƒÉng</th>
                    <th>Tr·∫°ng th√°i</th>
                </tr>
                </thead>
                <tbody>
                {filteredBlogs.map((b, index) => (
                    <tr
                        key={b._id || index}
                        style={{
                            backgroundColor: selectedPosts.includes(b._id) ? '#e3f2fd' : 'inherit',
                            cursor: isMultiSelectMode ? 'pointer' : 'default'
                        }}
                        onClick={() => isMultiSelectMode && handlePostSelection(b._id)}
                    >
                        {isMultiSelectMode && (
                            <td style={{ textAlign: 'center' }}>
                                <input
                                    type="checkbox"
                                    checked={selectedPosts.includes(b._id)}
                                    onChange={() => handlePostSelection(b._id)}
                                    style={{ cursor: 'pointer' }}
                                />
                            </td>
                        )}
                        <td>{index + 1}</td>
                        <td>{b.title}</td>
                        <td>{b.user_id?.name || b.user_id?.username || "·∫®n danh"}</td>
                        <td>{b.category_id?.name || "Kh√¥ng c√≥"}</td>
                        <td>{formatDate(b.date_published)}</td>
                        <td style={{
                            color: b.status ? 'green' : 'orange',
                            fontWeight: 'bold'
                        }}>
                            {b.status ? '‚úì ƒê√£ ƒëƒÉng' : '‚åõ Ch∆∞a ƒëƒÉng'}
                        </td>
                    </tr>
                ))}
                </tbody>
            </table>
        </div>
    );
};

export default BlogAdmin;
